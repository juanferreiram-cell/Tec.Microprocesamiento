
Extremos_hacia_centro_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c8  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001f7  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000205  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000af7  00000000  00000000  00000225  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068c  00000000  00000000  00000d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d4  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000167c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f8  00000000  00000000  000018a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000146  00000146  000001ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    000000b0  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_fini 00000002  0000014e  0000014e  000001c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_funcs_on_exit 00000002  00000150  00000150  000001c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_simulator_exit 00000002  00000152  00000152  000001c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.exit    00000016  00000130  00000130  000001a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text._Exit   00000004  0000014a  0000014a  000001be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
   8:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
   c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  10:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  14:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  18:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  1c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  20:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  24:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  28:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  2c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  30:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  34:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  38:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  3c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  40:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  44:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  48:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  4c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  50:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  54:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  58:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  5c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  60:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  64:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 98 00 	jmp	0x130	; 0x130 <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

00000146 <__bad_interrupt>:
 146:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000080 <main>:
#define DELAY_MS 100

int main(void)
{
	// Configuraci?n de pines: D0?D7 como salida
	DDRD = (1 << DDD0) | (1 << DDD1) | (1 << DDD2) | (1 << DDD3) |
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	(1 << DDD4) | (1 << DDD5) | (1 << DDD6) | (1 << DDD7);

	// Asegurar todos apagados al inicio
	PORTD = 0x00;
  84:	1b b8       	out	0x0b, r1	; 11

	while (1)
	{
		// Paso 1: solo extremos (PD0 y PD1)
		PORTD = (1 << PD0) | (1 << PD1);
  86:	83 e0       	ldi	r24, 0x03	; 3
  88:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	2f ef       	ldi	r18, 0xFF	; 255
  8c:	31 ee       	ldi	r19, 0xE1	; 225
  8e:	44 e0       	ldi	r20, 0x04	; 4
  90:	21 50       	subi	r18, 0x01	; 1
  92:	30 40       	sbci	r19, 0x00	; 0
  94:	40 40       	sbci	r20, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <main+0x10>
  98:	00 c0       	rjmp	.+0      	; 0x9a <main+0x1a>
  9a:	00 00       	nop
		_delay_ms(DELAY_MS);

		// Paso 2: agregar D6, D7
		PORTD = (1 << PD6) | (1 << PD7) | (1 << PD0) | (1 << PD1);
  9c:	93 ec       	ldi	r25, 0xC3	; 195
  9e:	9b b9       	out	0x0b, r25	; 11
  a0:	5f ef       	ldi	r21, 0xFF	; 255
  a2:	21 ee       	ldi	r18, 0xE1	; 225
  a4:	34 e0       	ldi	r19, 0x04	; 4
  a6:	51 50       	subi	r21, 0x01	; 1
  a8:	20 40       	sbci	r18, 0x00	; 0
  aa:	30 40       	sbci	r19, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x26>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x30>
  b0:	00 00       	nop
		_delay_ms(DELAY_MS);

		// Paso 3: agregar D2, D5
		PORTD = (1 << PD2) | (1 << PD5) | (1 << PD6) | (1 << PD7) |
  b2:	27 ee       	ldi	r18, 0xE7	; 231
  b4:	2b b9       	out	0x0b, r18	; 11
  b6:	4f ef       	ldi	r20, 0xFF	; 255
  b8:	51 ee       	ldi	r21, 0xE1	; 225
  ba:	34 e0       	ldi	r19, 0x04	; 4
  bc:	41 50       	subi	r20, 0x01	; 1
  be:	50 40       	sbci	r21, 0x00	; 0
  c0:	30 40       	sbci	r19, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x3c>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x46>
  c6:	00 00       	nop
		(1 << PD0) | (1 << PD1);
		_delay_ms(DELAY_MS);

		// Paso 4: agregar D3, D4 (todos encendidos)
		PORTD = (1 << PD2) | (1 << PD3) | (1 << PD4) | (1 << PD5) |
  c8:	3f ef       	ldi	r19, 0xFF	; 255
  ca:	3b b9       	out	0x0b, r19	; 11
  cc:	4f ef       	ldi	r20, 0xFF	; 255
  ce:	51 ee       	ldi	r21, 0xE1	; 225
  d0:	34 e0       	ldi	r19, 0x04	; 4
  d2:	41 50       	subi	r20, 0x01	; 1
  d4:	50 40       	sbci	r21, 0x00	; 0
  d6:	30 40       	sbci	r19, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x52>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x5c>
  dc:	00 00       	nop
		(1 << PD6) | (1 << PD7) | (1 << PD0) | (1 << PD1);
		_delay_ms(DELAY_MS);

		// Paso 5: volver a quitar D3, D4
		PORTD = (1 << PD2) | (1 << PD5) | (1 << PD6) | (1 << PD7) |
  de:	2b b9       	out	0x0b, r18	; 11
  e0:	4f ef       	ldi	r20, 0xFF	; 255
  e2:	51 ee       	ldi	r21, 0xE1	; 225
  e4:	24 e0       	ldi	r18, 0x04	; 4
  e6:	41 50       	subi	r20, 0x01	; 1
  e8:	50 40       	sbci	r21, 0x00	; 0
  ea:	20 40       	sbci	r18, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x66>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x70>
  f0:	00 00       	nop
		(1 << PD0) | (1 << PD1);
		_delay_ms(DELAY_MS);

		// Paso 6: solo D6, D7 + extremos
		PORTD = (1 << PD6) | (1 << PD7) | (1 << PD0) | (1 << PD1);
  f2:	9b b9       	out	0x0b, r25	; 11
  f4:	3f ef       	ldi	r19, 0xFF	; 255
  f6:	41 ee       	ldi	r20, 0xE1	; 225
  f8:	54 e0       	ldi	r21, 0x04	; 4
  fa:	31 50       	subi	r19, 0x01	; 1
  fc:	40 40       	sbci	r20, 0x00	; 0
  fe:	50 40       	sbci	r21, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x7a>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x84>
 104:	00 00       	nop
		_delay_ms(DELAY_MS);

		// Paso 7: solo extremos (PD0, PD1)
		PORTD = (1 << PD0) | (1 << PD1);
 106:	8b b9       	out	0x0b, r24	; 11
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	91 ee       	ldi	r25, 0xE1	; 225
 10c:	24 e0       	ldi	r18, 0x04	; 4
 10e:	81 50       	subi	r24, 0x01	; 1
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	20 40       	sbci	r18, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x8e>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x98>
 118:	00 00       	nop
		_delay_ms(DELAY_MS);

		// Apagar todos
		PORTD = 0x00;
 11a:	1b b8       	out	0x0b, r1	; 11
 11c:	3f ef       	ldi	r19, 0xFF	; 255
 11e:	41 ee       	ldi	r20, 0xE1	; 225
 120:	54 e0       	ldi	r21, 0x04	; 4
 122:	31 50       	subi	r19, 0x01	; 1
 124:	40 40       	sbci	r20, 0x00	; 0
 126:	50 40       	sbci	r21, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0xa2>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0xac>
 12c:	00 00       	nop
 12e:	ab cf       	rjmp	.-170    	; 0x86 <main+0x6>

Disassembly of section .text.__dummy_fini:

0000014e <_fini>:
 14e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000150 <__funcs_on_exit>:
 150:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000152 <__simulator_exit>:
 152:	08 95       	ret

Disassembly of section .text.exit:

00000130 <exit>:
 130:	ec 01       	movw	r28, r24
 132:	0e 94 a8 00 	call	0x150	; 0x150 <__funcs_on_exit>
 136:	0e 94 a7 00 	call	0x14e	; 0x14e <_fini>
 13a:	ce 01       	movw	r24, r28
 13c:	0e 94 a9 00 	call	0x152	; 0x152 <__simulator_exit>
 140:	ce 01       	movw	r24, r28
 142:	0e 94 a5 00 	call	0x14a	; 0x14a <_Exit>

Disassembly of section .text._Exit:

0000014a <_Exit>:
 14a:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
