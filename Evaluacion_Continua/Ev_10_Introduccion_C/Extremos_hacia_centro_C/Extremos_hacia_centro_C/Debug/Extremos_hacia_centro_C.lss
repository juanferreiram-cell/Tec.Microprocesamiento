
Extremos_hacia_centro_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002f6  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000002f6  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000325  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000333  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000afd  00000000  00000000  00000363  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000701  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000326  00000000  00000000  00001561  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  00001888  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001904  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000293  00000000  00000000  00001b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001d9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000254  00000254  000002e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.esperar_ms 0000001c  00000222  00000222  000002b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.esperar_y_ajustar 000000f6  000000ca  000000ca  0000015e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000062  000001c0  000001c0  00000254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .bss.acumulado_ms.1954 00000002  00800100  00800100  000002f6  2**0
                  ALLOC
 18 .progmemx.data.patrones 00000008  000000c2  000000c2  00000156  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 19 .text.__dummy_fini 00000002  0000025c  0000025c  000002f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_funcs_on_exit 00000002  0000025e  0000025e  000002f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_simulator_exit 00000002  00000260  00000260  000002f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.exit    00000016  0000023e  0000023e  000002d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text._Exit   00000004  00000258  00000258  000002ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
   8:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
   c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  10:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  14:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  18:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  1c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  20:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  24:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  28:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  2c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  30:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  34:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  38:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  3c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  40:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  44:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  48:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  4c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  50:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  54:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  58:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  5c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  60:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  64:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 02       	muls	r16, r17
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <main>
  ba:	0c 94 1f 01 	jmp	0x23e	; 0x23e <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

00000254 <__bad_interrupt>:
 254:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.esperar_ms:

00000222 <esperar_ms>:
#define RETARDO_REPETICION_MS     120UL    // cada cu?ntos ms aplica un PASO
#define RETARDO_TROZO_MS            5U     // granularidad de chequeo

// Retardo en ms (usa F_CPU = 8 MHz)
static void esperar_ms(uint16_t ms) {
    while (ms--) _delay_ms(1);
 222:	07 c0       	rjmp	.+14     	; 0x232 <esperar_ms+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 224:	8f ec       	ldi	r24, 0xCF	; 207
 226:	97 e0       	ldi	r25, 0x07	; 7
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <esperar_ms+0x6>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <esperar_ms+0xc>
 22e:	00 00       	nop
 230:	c9 01       	movw	r24, r18
 232:	9c 01       	movw	r18, r24
 234:	21 50       	subi	r18, 0x01	; 1
 236:	31 09       	sbc	r19, r1
 238:	89 2b       	or	r24, r25
 23a:	a1 f7       	brne	.-24     	; 0x224 <esperar_ms+0x2>
}
 23c:	08 95       	ret

Disassembly of section .text.esperar_y_ajustar:

000000ca <esperar_y_ajustar>:

/* Espera 'ms_total' y permite ajustar *p_retardo_ms mientras espera */
static void esperar_y_ajustar(volatile uint32_t *p_retardo_ms, uint32_t ms_total) {
  ca:	cf 92       	push	r12
  cc:	df 92       	push	r13
  ce:	ef 92       	push	r14
  d0:	ff 92       	push	r15
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	8c 01       	movw	r16, r24
  dc:	6a 01       	movw	r12, r20
  de:	7b 01       	movw	r14, r22
    static uint16_t acumulado_ms = 0;

    while (ms_total > 0) {
  e0:	60 c0       	rjmp	.+192    	; 0x1a2 <esperar_y_ajustar+0xd8>
        uint16_t trozo = (ms_total > RETARDO_TROZO_MS) ? RETARDO_TROZO_MS : (uint16_t)ms_total;
  e2:	86 e0       	ldi	r24, 0x06	; 6
  e4:	c8 16       	cp	r12, r24
  e6:	d1 04       	cpc	r13, r1
  e8:	e1 04       	cpc	r14, r1
  ea:	f1 04       	cpc	r15, r1
  ec:	10 f4       	brcc	.+4      	; 0xf2 <esperar_y_ajustar+0x28>
  ee:	e6 01       	movw	r28, r12
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <esperar_y_ajustar+0x2c>
  f2:	c5 e0       	ldi	r28, 0x05	; 5
  f4:	d0 e0       	ldi	r29, 0x00	; 0
        esperar_ms(trozo);
  f6:	ce 01       	movw	r24, r28
  f8:	0e 94 11 01 	call	0x222	; 0x222 <esperar_ms>
        ms_total -= trozo;
  fc:	cc 1a       	sub	r12, r28
  fe:	dd 0a       	sbc	r13, r29
 100:	e1 08       	sbc	r14, r1
 102:	f1 08       	sbc	r15, r1

        uint8_t pinb   = PINB;
 104:	93 b1       	in	r25, 0x03	; 3
        uint8_t rapido = !(pinb & (1 << ENTRADA_RAPIDO)); // activos en bajo
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	39 2f       	mov	r19, r25
 10a:	32 70       	andi	r19, 0x02	; 2
 10c:	91 fd       	sbrc	r25, 1
 10e:	20 e0       	ldi	r18, 0x00	; 0
        uint8_t lento  = !(pinb & (1 << ENTRADA_LENTO));
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	89 27       	eor	r24, r25
 114:	81 70       	andi	r24, 0x01	; 1
        uint8_t uno    = (rapido ^ lento);                // exactamente uno presionado

        if (uno) {
 116:	28 17       	cp	r18, r24
 118:	09 f4       	brne	.+2      	; 0x11c <esperar_y_ajustar+0x52>
 11a:	3f c0       	rjmp	.+126    	; 0x19a <esperar_y_ajustar+0xd0>
            acumulado_ms += trozo;
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 120:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 124:	c8 0f       	add	r28, r24
 126:	d9 1f       	adc	r29, r25
 128:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12c:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__DATA_REGION_ORIGIN__>
            if (acumulado_ms >= RETARDO_REPETICION_MS) {
 130:	c8 37       	cpi	r28, 0x78	; 120
 132:	d1 05       	cpc	r29, r1
 134:	b0 f1       	brcs	.+108    	; 0x1a2 <esperar_y_ajustar+0xd8>
                acumulado_ms = 0;
 136:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 13a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>

                if (rapido) {
 13e:	31 11       	cpse	r19, r1
 140:	1f c0       	rjmp	.+62     	; 0x180 <esperar_y_ajustar+0xb6>
                    // R?PIDO: bajar retardo con piso
                    if (*p_retardo_ms > RETARDO_MIN_MS + RETARDO_PASO_MS)
 142:	f8 01       	movw	r30, r16
 144:	80 81       	ld	r24, Z
 146:	91 81       	ldd	r25, Z+1	; 0x01
 148:	a2 81       	ldd	r26, Z+2	; 0x02
 14a:	b3 81       	ldd	r27, Z+3	; 0x03
 14c:	46 97       	sbiw	r24, 0x16	; 22
 14e:	a1 05       	cpc	r26, r1
 150:	b1 05       	cpc	r27, r1
 152:	60 f0       	brcs	.+24     	; 0x16c <esperar_y_ajustar+0xa2>
                        *p_retardo_ms -= RETARDO_PASO_MS;
 154:	80 81       	ld	r24, Z
 156:	91 81       	ldd	r25, Z+1	; 0x01
 158:	a2 81       	ldd	r26, Z+2	; 0x02
 15a:	b3 81       	ldd	r27, Z+3	; 0x03
 15c:	44 97       	sbiw	r24, 0x14	; 20
 15e:	a1 09       	sbc	r26, r1
 160:	b1 09       	sbc	r27, r1
 162:	80 83       	st	Z, r24
 164:	91 83       	std	Z+1, r25	; 0x01
 166:	a2 83       	std	Z+2, r26	; 0x02
 168:	b3 83       	std	Z+3, r27	; 0x03
 16a:	1b c0       	rjmp	.+54     	; 0x1a2 <esperar_y_ajustar+0xd8>
                    else
                        *p_retardo_ms = RETARDO_MIN_MS;
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	a0 e0       	ldi	r26, 0x00	; 0
 172:	b0 e0       	ldi	r27, 0x00	; 0
 174:	f8 01       	movw	r30, r16
 176:	80 83       	st	Z, r24
 178:	91 83       	std	Z+1, r25	; 0x01
 17a:	a2 83       	std	Z+2, r26	; 0x02
 17c:	b3 83       	std	Z+3, r27	; 0x03
 17e:	11 c0       	rjmp	.+34     	; 0x1a2 <esperar_y_ajustar+0xd8>
                } else { // lento
                    // LENTO: subir retardo (sin techo)
                    *p_retardo_ms += RETARDO_PASO_MS;
 180:	f8 01       	movw	r30, r16
 182:	80 81       	ld	r24, Z
 184:	91 81       	ldd	r25, Z+1	; 0x01
 186:	a2 81       	ldd	r26, Z+2	; 0x02
 188:	b3 81       	ldd	r27, Z+3	; 0x03
 18a:	44 96       	adiw	r24, 0x14	; 20
 18c:	a1 1d       	adc	r26, r1
 18e:	b1 1d       	adc	r27, r1
 190:	80 83       	st	Z, r24
 192:	91 83       	std	Z+1, r25	; 0x01
 194:	a2 83       	std	Z+2, r26	; 0x02
 196:	b3 83       	std	Z+3, r27	; 0x03
 198:	04 c0       	rjmp	.+8      	; 0x1a2 <esperar_y_ajustar+0xd8>
                }
            }
        } else {
            acumulado_ms = 0; // solt?, ambos o ninguno: se mantiene
 19a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 19e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>

/* Espera 'ms_total' y permite ajustar *p_retardo_ms mientras espera */
static void esperar_y_ajustar(volatile uint32_t *p_retardo_ms, uint32_t ms_total) {
    static uint16_t acumulado_ms = 0;

    while (ms_total > 0) {
 1a2:	c1 14       	cp	r12, r1
 1a4:	d1 04       	cpc	r13, r1
 1a6:	e1 04       	cpc	r14, r1
 1a8:	f1 04       	cpc	r15, r1
 1aa:	09 f0       	breq	.+2      	; 0x1ae <esperar_y_ajustar+0xe4>
 1ac:	9a cf       	rjmp	.-204    	; 0xe2 <esperar_y_ajustar+0x18>
            }
        } else {
            acumulado_ms = 0; // solt?, ambos o ninguno: se mantiene
        }
    }
}
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	1f 91       	pop	r17
 1b4:	0f 91       	pop	r16
 1b6:	ff 90       	pop	r15
 1b8:	ef 90       	pop	r14
 1ba:	df 90       	pop	r13
 1bc:	cf 90       	pop	r12
 1be:	08 95       	ret

Disassembly of section .text.main:

000001c0 <main>:
    (1<<PD0) | (1<<PD1) | (1<<PD6) | (1<<PD7),                        // Paso 6: solo PD6 y PD7 + extremos PD0 y PD1
    (1<<PD0) | (1<<PD1),                                              // Paso 7: volver a solo extremos
    0x00                                                              // Paso 8: apagar todos
};

int main(void) {
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	00 d0       	rcall	.+0      	; 0x1c6 <main+0x6>
 1c6:	00 d0       	rcall	.+0      	; 0x1c8 <main+0x8>
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
    // LEDs en PORTD
    DDRD  = 0xFF;
 1cc:	8f ef       	ldi	r24, 0xFF	; 255
 1ce:	8a b9       	out	0x0a, r24	; 10
    PORTD = 0x00;
 1d0:	1b b8       	out	0x0b, r1	; 11

    // Entradas PB0 (LENTO) y PB1 (R?PIDO) con resistencias pull-up
    DDRB  &= ~((1 << ENTRADA_LENTO) | (1 << ENTRADA_RAPIDO));
 1d2:	84 b1       	in	r24, 0x04	; 4
 1d4:	8c 7f       	andi	r24, 0xFC	; 252
 1d6:	84 b9       	out	0x04, r24	; 4
    PORTB |=  ((1 << ENTRADA_LENTO) | (1 << ENTRADA_RAPIDO));
 1d8:	85 b1       	in	r24, 0x05	; 5
 1da:	83 60       	ori	r24, 0x03	; 3
 1dc:	85 b9       	out	0x05, r24	; 5

    volatile uint32_t retardo_ms = RETARDO_INICIAL_MS;  // velocidad actual (persistente)
 1de:	84 ef       	ldi	r24, 0xF4	; 244
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	a0 e0       	ldi	r26, 0x00	; 0
 1e4:	b0 e0       	ldi	r27, 0x00	; 0
 1e6:	89 83       	std	Y+1, r24	; 0x01
 1e8:	9a 83       	std	Y+2, r25	; 0x02
 1ea:	ab 83       	std	Y+3, r26	; 0x03
 1ec:	bc 83       	std	Y+4, r27	; 0x04
    const uint8_t N = sizeof(patrones) / sizeof(patrones[0]);
    uint8_t i = 0;
 1ee:	10 e0       	ldi	r17, 0x00	; 0
 1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <main+0x34>
        PORTD = patrones[i];
        esperar_y_ajustar(&retardo_ms, retardo_ms);  // ajustar mientras espera

        // siguiente paso de la secuencia
        i++;
        if (i >= N) i = 0;
 1f2:	10 e0       	ldi	r17, 0x00	; 0
    volatile uint32_t retardo_ms = RETARDO_INICIAL_MS;  // velocidad actual (persistente)
    const uint8_t N = sizeof(patrones) / sizeof(patrones[0]);
    uint8_t i = 0;

    while (1) {
        PORTD = patrones[i];
 1f4:	81 2f       	mov	r24, r17
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	a0 e0       	ldi	r26, 0x00	; 0
 1fa:	8e 53       	subi	r24, 0x3E	; 62
 1fc:	9f 4f       	sbci	r25, 0xFF	; 255
 1fe:	af 4f       	sbci	r26, 0xFF	; 255
 200:	fc 01       	movw	r30, r24
 202:	84 91       	lpm	r24, Z
 204:	a7 fd       	sbrc	r26, 7
 206:	80 81       	ld	r24, Z
 208:	8b b9       	out	0x0b, r24	; 11
        esperar_y_ajustar(&retardo_ms, retardo_ms);  // ajustar mientras espera
 20a:	49 81       	ldd	r20, Y+1	; 0x01
 20c:	5a 81       	ldd	r21, Y+2	; 0x02
 20e:	6b 81       	ldd	r22, Y+3	; 0x03
 210:	7c 81       	ldd	r23, Y+4	; 0x04
 212:	ce 01       	movw	r24, r28
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	0e 94 65 00 	call	0xca	; 0xca <esperar_y_ajustar>

        // siguiente paso de la secuencia
        i++;
 21a:	1f 5f       	subi	r17, 0xFF	; 255
        if (i >= N) i = 0;
 21c:	18 30       	cpi	r17, 0x08	; 8
 21e:	48 f7       	brcc	.-46     	; 0x1f2 <main+0x32>
 220:	e9 cf       	rjmp	.-46     	; 0x1f4 <main+0x34>

Disassembly of section .text.__dummy_fini:

0000025c <_fini>:
 25c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000025e <__funcs_on_exit>:
 25e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000260 <__simulator_exit>:
 260:	08 95       	ret

Disassembly of section .text.exit:

0000023e <exit>:
 23e:	ec 01       	movw	r28, r24
 240:	0e 94 2f 01 	call	0x25e	; 0x25e <__funcs_on_exit>
 244:	0e 94 2e 01 	call	0x25c	; 0x25c <_fini>
 248:	ce 01       	movw	r24, r28
 24a:	0e 94 30 01 	call	0x260	; 0x260 <__simulator_exit>
 24e:	ce 01       	movw	r24, r28
 250:	0e 94 2c 01 	call	0x258	; 0x258 <_Exit>

Disassembly of section .text._Exit:

00000258 <_Exit>:
 258:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
