
AVRASM ver. 2.2.8  C:\Users\juanm\Desktop\Laboratorios\Micro\Tec.Microprocesamiento\Laboratorio_1\Codigos\Problema_B_Matriz_De_LEDS\Problema_B_Matriz_De_LEDS\main.asm Tue Sep 23 02:35:49 2025

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
C:\Users\juanm\Desktop\Laboratorios\Micro\Tec.Microprocesamiento\Laboratorio_1\Codigos\Problema_B_Matriz_De_LEDS\Problema_B_Matriz_De_LEDS\main.asm(4): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328pdef.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
C:\Users\juanm\Desktop\Laboratorios\Micro\Tec.Microprocesamiento\Laboratorio_1\Codigos\Problema_B_Matriz_De_LEDS\Problema_B_Matriz_De_LEDS\main.asm(4): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328pdef.inc'
                                 
                                 ; Codigo Problema B Matriz de Leds
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Autores: Lucas Elizalde, Juan Manuel Ferreira y Felipe Morrudo
                                 
                                 .include "m328pdef.inc" 
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 .org 0x0000
000000 c07d                          rjmp Inicio
                                 
                                 .equ F_CPU = 16000000
                                 .equ baud  = 9600
                                 .equ bps   = (F_CPU/16/baud) - 1
                                 
                                 .equ FILASB_OFF       = 0x3C   
                                 .equ FILASC_OFF       = 0x0F   
                                 
                                 ; VELOCIDAD: numero de frames (barridos de 8 filas) por cada desplazamiento 
                                 ; de 1 columna en el scroll. Mayor valor = scroll ms lento.
                                 .equ VELOCIDAD  = 10 
                                 .equ NUMFIG     = 21     
                                 
                                 ; Instrucciones para la matriz LED
                                 ; Entrar al editor: [https://xantorohara.github.io/led-matrix-editor/]
                                 ; Dibujar la letra o figura que quieras.
                                 ; Copiar el patron hexadecimal que genera la pagina (ej.: 0x81C3A59981818181).
                                 ; Para usarlo en la matriz, separar en bytes y antepone 0x a CADA par de caracteres.
                                 ; Ejemplo: 0x81C3A59981818181 ?? 0x81, 0xC3, 0xA5, 0x99, 0x81, 0x81, 0x81, 0x81
                                 ; Con eso ya se puede cargar y correr en la matriz.
                                 
                                 
000001 c381
000002 99a5
000003 8181
000004 8181                      M:         .db 0x81, 0xC3, 0xA5, 0x99, 0x81, 0x81, 0x81, 0x81
000005 017f
000006 0101
000007 011f
000008 7f01                      E:         .db 0x7F, 0x01, 0x01, 0x01, 0x1F, 0x01, 0x01, 0x7F
000009 0000
00000a 0000
00000b 0000
00000c 0000                      ESPACIO:   .db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00000d 017f
00000e 0101
00000f 4179
000010 7f41                      G:         .db 0x7F, 0x01, 0x01, 0x01, 0x79, 0x41, 0x41, 0x7F
000011 4141
000012 4141
000013 4141
000014 7f41                      U:         .db 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x7F
000015 017f
000016 0101
000017 407f
000018 7f40                      S:         .db 0x7F, 0x01, 0x01, 0x01, 0x7F, 0x40, 0x40, 0x7F
000019 087f
00001a 0808
00001b 0808
00001c 0808                      T:         .db 0x7F, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08
00001d 817e
00001e ff81
00001f 8181
000020 8181                      A:         .db 0x7E, 0x81, 0x81, 0xFF, 0x81, 0x81, 0x81, 0x81
000021 0000
000022 0000
000023 0000
000024 0000                      ESPACIO1:  .db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
000025 017f
000026 0101
000027 0101
000028 7f01                      C:         .db 0x7F, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x7F
000029 81ff
00002a 8181
00002b 8181
00002c ff81                      O:         .db 0xFF, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xFF
00002d c381
00002e 99a5
00002f 8181
000030 8181                      M1:        .db 0x81, 0xC3, 0xA5, 0x99, 0x81, 0x81, 0x81, 0x81
000031 017f
000032 0101
000033 011f
000034 7f01                      E2:        .db 0x7F, 0x01, 0x01, 0x01, 0x1F, 0x01, 0x01, 0x7F
000035 417f
000036 4141
000037 117f
000038 4121                      R:         .db 0x7F, 0x41, 0x41, 0x41, 0x7F, 0x11, 0x21, 0x41
000039 0000
00003a 0000
00003b 0000
00003c 0000                      ESPACIO2:  .db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00003d 817e
00003e ff81
00003f 8181
000040 8181                      A1:        .db 0x7E, 0x81, 0x81, 0xFF, 0x81, 0x81, 0x81, 0x81
000041 017f
000042 0101
000043 407f
000044 7f40                      S1:        .db 0x7F, 0x01, 0x01, 0x01, 0x7F, 0x40, 0x40, 0x7F
000045 817e
000046 ff81
000047 8181
000048 8181                      A2:        .db 0x7E, 0x81, 0x81, 0xFF, 0x81, 0x81, 0x81, 0x81
000049 211f
00004a 4141
00004b 4141
00004c 1f21                      D:         .db 0x1F, 0x21, 0x41, 0x41, 0x41, 0x41, 0x21, 0x1F
00004d 81ff
00004e 8181
00004f 8181
000050 ff81                      O1:        .db 0xFF, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xFF
000051 0000
000052 0000
000053 0000
000054 0000                      ESPACIO3:  .db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                 
                                 ; Patrones de bits para cada figura
000055 423c
000056 81a5
000057 99a5
000058 3c42                      SONRISA: .db 0x3C,0x42,0xA5,0x81,0xA5,0x99,0x42,0x3C
000059 423c
00005a 81a5
00005b a599
00005c 3c42                      TRISTE:  .db 0x3C,0x42,0xA5,0x81,0x99,0xA5,0x42,0x3C
00005d 6600
00005e ffff
00005f 7eff
000060 183c                      CORAZON: .db 0x00,0x66,0xFF,0xFF,0xFF,0x7E,0x3C,0x18
000061 3c18
000062 ff7e
000063 7eff
000064 183c                      ROMBO:   .db 0x18,0x3C,0x7E,0xFF,0xFF,0x7E,0x3C,0x18
000065 7e3c
000066 ffdb
000067 24ff
000068 815a                      ALIEN:   .db 0x3C,0x7E,0xDB,0xFF,0xFF,0x24,0x5A,0x81
                                 
                                 
                                 ; Tabla de punteros a caracteres para formar el mensaje "ME GUSTA COMER ASADO"
                                 MENSAJE:
000069 0002
00006a 000a
00006b 0012
00006c 001a
00006d 0022
00006e 002a
00006f 0032
000070 003a
000071 0042                          .dw (M<<1),(E<<1),(ESPACIO<<1),(G<<1),(U<<1),(S<<1),(T<<1),(A<<1),(ESPACIO1<<1), \
000072 004a
000073 0052
000074 005a
000075 0062
000076 006a
000077 0072
000078 007a
000079 0082
00007a 008a                              (C<<1),(O<<1),(M1<<1),(E2<<1),(R<<1),(ESPACIO2<<1),(A1<<1),(S1<<1),(A2<<1), \
00007b 0092
00007c 009a
00007d 00a2                              (D<<1),(O1<<1),(ESPACIO3<<1)
                                 
                                 
                                 ; Configuracion inicial del sistema: stack, UART, matriz y mensaje de bienvenida
                                 Inicio:
                                     ; Configuracion del stack pointer
00007e e008                          ldi r16, HIGH(RAMEND)
00007f bf0e                          out SPH, r16
000080 ef0f                          ldi r16, LOW(RAMEND)
000081 bf0d                          out SPL, r16
000082 2411                          clr r1                  
                                 
                                     ; Inicializacon UART a 9600 baudios
000083 e607                          ldi r16, LOW(bps)
000084 e010                          ldi r17, HIGH(bps)
000085 d041                          rcall inicializarUART
                                 
                                     ; Configuracion de la matriz LED (GPIO + Timer0)
000086 d141                          rcall inicializarMatriz
                                 
                                     ; Mostrar menu de opciones por puerto serie
000087 e0f1                          ldi ZH, high(msgInicio<<1)
000088 ecec                          ldi ZL, low(msgInicio<<1)
000089 d056                          rcall enviarCadena
                                 
                                 
                                 ; LOOP PRINCIPAL
                                 ; Bucle principal: lee comandos por UART y ejecuta la funci?n correspondiente
                                 bucle_principal:
00008a d04e                          rcall leerCaracter       ; espera un caracter en r16
                                 
                                     ; Evaluacion de opciones del menu
00008b 3301                          cpi  r16, '1'
00008c f069                          breq caso_1
00008d 3302                          cpi  r16, '2'
00008e f081                          breq caso_2
00008f 3303                          cpi  r16, '3'
000090 f0a1                          breq caso_3
000091 3304                          cpi  r16, '4'
000092 f0c1                          breq caso_4
000093 3305                          cpi  r16, '5'
000094 f0e1                          breq caso_5
000095 3306                          cpi  r16, '6'
000096 f101                          breq caso_6
000097 3307                          cpi  r16, '7'
000098 f121                          breq caso_7
000099 c027                          rjmp caso_invalido
                                 
                                 ; CASOS DEL MENU PRINCIPAL
                                 
                                 caso_1:
                                     ; Opcion 1: Mostrar mensaje scrolleando
00009a e0f2                          ldi ZH, high(txtUno<<1)
00009b ede0                          ldi ZL, low(txtUno<<1)
00009c d043                          rcall enviarCadena
00009d d213                          rcall mostrarScrollMensaje
00009e c027                          rjmp fin_opcion
                                 
                                 caso_2:
                                     ; Opcion 2: Mostrar cara feliz continuamente
00009f e0f2                          ldi ZH, high(txtDos<<1)
0000a0 eee6                          ldi ZL, low(txtDos<<1)
0000a1 d03e                          rcall enviarCadena
0000a2 eaea                          ldi  ZL, low(SONRISA<<1)
0000a3 e0f0                          ldi  ZH, high(SONRISA<<1)
0000a4 c1ad                          rjmp mostrarSiempre
                                 
                                 caso_3:
                                     ; Opcion 3: Mostrar cara triste continuamente
0000a5 e0f3                          ldi ZH, high(txtTres<<1)
0000a6 e0e0                          ldi ZL, low(txtTres<<1)
0000a7 d038                          rcall enviarCadena
0000a8 ebe2                          ldi  ZL, low(TRISTE<<1)
0000a9 e0f0                          ldi  ZH, high(TRISTE<<1)
0000aa c1a7                          rjmp mostrarSiempre
                                 
                                 caso_4:
                                     ; Opcion 4: Mostrar rombo continuamente
0000ab e0f3                          ldi ZH, high(txtCuatro<<1)
0000ac e1ec                          ldi ZL, low(txtCuatro<<1)
0000ad d032                          rcall enviarCadena
0000ae ece2                          ldi  ZL, low(ROMBO<<1)
0000af e0f0                          ldi  ZH, high(ROMBO<<1)
0000b0 c1a1                          rjmp mostrarSiempre
                                 
                                 caso_5:
                                     ; Opcion 5: Mostrar corazon continuamente
0000b1 e0f3                          ldi ZH, high(txtCinco<<1)
0000b2 e3e2                          ldi ZL, low(txtCinco<<1)
0000b3 d02c                          rcall enviarCadena
0000b4 ebea                          ldi  ZL, low(CORAZON<<1)
0000b5 e0f0                          ldi  ZH, high(CORAZON<<1)
0000b6 c19b                          rjmp mostrarSiempre
                                 
                                 caso_6:
                                     ; Opcion 6: Mostrar alien continuamente
0000b7 e0f3                          ldi ZH, high(txtSeis<<1)
0000b8 e4e8                          ldi ZL, low(txtSeis<<1)
0000b9 d026                          rcall enviarCadena
0000ba ecea                          ldi  ZL, low(ALIEN<<1)
0000bb e0f0                          ldi  ZH, high(ALIEN<<1)
0000bc c195                          rjmp mostrarSiempre
                                 
                                 caso_7:
                                     ; Opcion 7: Secuencia animada de las 5 figuras
0000bd e0f3                          ldi ZH, high(txtSiete<<1)
0000be e7e0                          ldi ZL, low(txtSiete<<1)
0000bf d020                          rcall enviarCadena
0000c0 c151                          rjmp mostrarSecuenciaAnimada
                                 
                                 caso_invalido:
                                     ; Echo del caracter no valido + nueva linea
0000c1 d010                          rcall enviarCaracter
0000c2 e00d                          ldi  r16, 13
0000c3 d00e                          rcall enviarCaracter
0000c4 e00a                          ldi  r16, 10
0000c5 d00c                          rcall enviarCaracter
                                 
                                 fin_opcion:
0000c6 cfc3                          rjmp bucle_principal
                                 
                                 ; Inicializacion del UART
                                 inicializarUART:
0000c7 9300 00c4                     sts UBRR0L, r16
0000c9 9310 00c5                     sts UBRR0H, r17
0000cb e108                          ldi r16, (1<<RXEN0)|(1<<TXEN0)
0000cc 9300 00c1                     sts UCSR0B, r16
0000ce e006                          ldi r16, (1<<UCSZ01)|(1<<UCSZ00)
0000cf 9300 00c2                     sts UCSR0C, r16
0000d1 9508                          ret
                                 
                                 ; Envio de un caracter: espera que el buffer esto libre y envia el byte en r16
                                 enviarCaracter:
0000d2 9110 00c0                     lds r17, UCSR0A
0000d4 ff15                          sbrs r17, UDRE0
0000d5 cffc                          rjmp enviarCaracter
0000d6 9300 00c6                     sts UDR0, r16
0000d8 9508                          ret
                                 
                                 ; Lectura de un caracter: espera hasta recibir un byte y lo retorna en r16
                                 leerCaracter:
0000d9 9110 00c0                     lds r17, UCSR0A
0000db ff17                          sbrs r17, RXC0
0000dc cffc                          rjmp leerCaracter
0000dd 9100 00c6                     lds r16, UDR0
0000df 9508                          ret
                                 
                                 ; Envio de cadena: transmite una cadena terminada en 0 desde la memoria Flash
                                 enviarCadena:
0000e0 9105                          lpm r16, Z+
0000e1 3000                          cpi r16, 0
0000e2 f011                          breq fin_cadena
0000e3 dfee                          rcall enviarCaracter
0000e4 cffb                          rjmp enviarCadena
                                 fin_cadena:
0000e5 9508                          ret
                                 
                                 ; Mensajes en el Monitor Serial
                                 .cseg
                                 msgInicio:
0000e6 6942
0000e7 6e65
0000e8 6576
0000e9 696e
0000ea 6f64
0000eb 2021
0000ec 6e49
0000ed 7267
0000ee 7365
0000ef 2065
0000f0 6c65
0000f1 6e20
0000f2 6d75
0000f3 7265
0000f4 206f
0000f5 6170
0000f6 6172
0000f7 6c20
0000f8 2061
0000f9 6361
0000fa 6963
0000fb 6e6f
0000fc 7120
0000fd 6575
0000fe 7120
0000ff 6975
000100 7265
000101 2065
000102 6572
000103 6c61
000104 7a69
000105 7261                          .db "Bienvenido! Ingrese el numero para la accion que quiere realizar", 13, 10, \
000106 0a0d
000107 2031
000108 202d
000109 6f4d
00010a 7473
00010b 6172
00010c 2072
00010d 6c65
00010e 4d20
00010f 6e65
000110 6173
000111 656a                              "1 - Mostrar el Mensaje", 13, 10, \
000112 0a0d
000113 2032
000114 202d
000115 6f4d
000116 7473
000117 6172
000118 2072
000119 6143
00011a 6172
00011b 4620
00011c 6c65
00011d 7a69                              "2 - Mostrar Cara Feliz", 13, 10, \
00011e 0a0d
00011f 2033
000120 202d
000121 6f4d
000122 7473
000123 6172
000124 2072
000125 6143
000126 6172
000127 5420
000128 6972
000129 7473
00012a 0d65                              "3 - Mostrar Cara Triste", 13, 10, \
00012b 340a
00012c 2d20
00012d 4d20
00012e 736f
00012f 7274
000130 7261
000131 5220
000132 6d6f
000133 6f62                              "4 - Mostrar Rombo", 13, 10, \
000134 0a0d
000135 2035
000136 202d
000137 6f4d
000138 7473
000139 6172
00013a 2072
00013b 6f43
00013c 6172
00013d 6f7a
00013e 0d6e                              "5 - Mostrar Corazon", 13, 10, \
00013f 360a
000140 2d20
000141 4d20
000142 736f
000143 7274
000144 7261
000145 4120
000146 696c
000147 6e65
000148 6420
000149 2065
00014a 7053
00014b 6361
00014c 2065
00014d 6e49
00014e 6176
00014f 6564
000150 7372                              "6 - Mostrar Alien de Space Invaders", 13, 10, \
000151 0a0d
000152 2037
000153 202d
000154 6f4d
000155 7473
000156 6172
000157 2072
000158 616c
000159 2073
00015a 2035
00015b 6966
00015c 7567
00015d 6172
00015e 2073
00015f 6163
000160 6164
000161 3120
000162 7320
000163 6765
000164 6e75
000165 6f64
000166 0a0d
000167 0000                              "7 - Mostrar las 5 figuras cada 1 segundo", 13, 10, 0, 0   
                                 
000168 6148
000169 2073
00016a 6c65
00016b 6765
00016c 6469
00016d 206f
00016e 454d
00016f 534e
000170 4a41
000171 0d45
000172 000a                      txtUno:    .db "Has elegido MENSAJE",      13, 10, 0          
000173 6148
000174 2073
000175 6c65
000176 6765
000177 6469
000178 206f
000179 4143
00017a 4152
00017b 4620
00017c 4c45
00017d 5a49
00017e 0a0d
00017f 0000                      txtDos:    .db "Has elegido CARA FELIZ",      13, 10, 0, 0        
000180 6148
000181 2073
000182 6c65
000183 6765
000184 6469
000185 206f
000186 4143
000187 4152
000188 5420
000189 4952
00018a 5453
00018b 0d45
00018c 000a
00018d 0000                      txtTres:   .db "Has elegido CARA TRISTE",     13, 10, 0, 0, 0       
00018e 6148
00018f 2073
000190 6c65
000191 6765
000192 6469
000193 206f
000194 4f52
000195 424d
000196 0d4f
000197 000a
000198 0000                      txtCuatro: .db "Has elegido ROMBO",   13, 10, 0, 0, 0       
000199 6148
00019a 2073
00019b 6c65
00019c 6765
00019d 6469
00019e 206f
00019f 4f43
0001a0 4152
0001a1 4f5a
0001a2 0d4e
0001a3 000a                      txtCinco:  .db "Has elegido CORAZON",    13, 10, 0          
0001a4 6148
0001a5 2073
0001a6 6c65
0001a7 6765
0001a8 6469
0001a9 206f
0001aa 4c41
0001ab 4549
0001ac 204e
0001ad 4544
0001ae 5320
0001af 4150
0001b0 4543
0001b1 4920
0001b2 564e
0001b3 4441
0001b4 5245
0001b5 0d53
0001b6 000a
0001b7 0000                      txtSeis:   .db "Has elegido ALIEN DE SPACE INVADERS",     13, 10, 0, 0, 0       
0001b8 6148
0001b9 2073
0001ba 6c65
0001bb 6765
0001bc 6469
0001bd 206f
0001be 4556
0001bf 2052
0001c0 414c
0001c1 2053
0001c2 2035
0001c3 4946
0001c4 5547
0001c5 4152
0001c6 0d53
0001c7 000a                      txtSiete:  .db "Has elegido VER LAS 5 FIGURAS",    13, 10, 0
                                 
                                 
                                 ; Configuracion de pines GPIO para matriz 8x8 y Timer0 para temporizacion
                                 inicializarMatriz:
                                     ; Configuracion de pines como salida (sin afectar PD0/PD1 del UART)
0001c8 b10a                          in   r16, DDRD
0001c9 6f0c                          ori  r16, 0b11111100     
0001ca b90a                          out  DDRD, r16
0001cb e30f                          ldi  r16, 0b00111111      
0001cc b904                          out  DDRB, r16
0001cd b107                          in   r16, DDRC
0001ce 600f                          ori  r16, 0b00001111
0001cf b907                          out  DDRC, r16
                                 
                                     ; Estado inicial: columnas en LOW, filas en HIGH (matriz apagada)
0001d0 b10b                          in   r16, PORTD
0001d1 7003                          andi r16, 0b00000011      
0001d2 b90b                          out  PORTD, r16
0001d3 b105                          in   r16, PORTB
0001d4 7c00                          andi r16, 0b11000000      
0001d5 630c                          ori  r16, FILASB_OFF      
0001d6 b905                          out  PORTB, r16
0001d7 b108                          in   r16, PORTC
0001d8 7f00                          andi r16, 0b11110000      
0001d9 600f                          ori  r16, FILASC_OFF     
0001da b908                          out  PORTC, r16
                                 
                                     ; Configuracion Timer0 en modo CTC para generar base de tiempo de ~1ms
0001db e002                          ldi  r16, (1<<WGM01)      
0001dc bd04                          out  TCCR0A, r16
0001dd ef09                          ldi  r16, 249            
0001de bd07                          out  OCR0A, r16
0001df e003                          ldi  r16, (1<<CS01)|(1<<CS00)
0001e0 bd05                          out  TCCR0B, r16
0001e1 9508                          ret
                                 
                                 
                                 ; Secuencia de 5 figuras mostradas 3 segundos cada una (una sola pasada)
                                 mostrarSecuenciaCompleta:
0001e2 920f                          push r0
0001e3 930f                          push r16
0001e4 931f                          push r17
0001e5 932f                          push r18
0001e6 933f                          push r19
0001e7 934f                          push r20
0001e8 935f                          push r21
0001e9 936f                          push r22
0001ea 938f                          push r24
0001eb 939f                          push r25
0001ec 93af                          push r26
0001ed 93bf                          push r27
0001ee 93cf                          push r28
0001ef 93df                          push r29
0001f0 93ef                          push r30
0001f1 93ff                          push r31
                                 
                                     ; Mostrar cada figura durante aproximadamente 3 segundos
0001f2 eaea                          ldi  ZL, low(SONRISA<<1)
0001f3 e0f0                          ldi  ZH, high(SONRISA<<1)
0001f4 d046                          rcall mostrar3Segundos
                                 
0001f5 ebe2                          ldi  ZL, low(TRISTE<<1)
0001f6 e0f0                          ldi  ZH, high(TRISTE<<1)
0001f7 d043                          rcall mostrar3Segundos
                                 
0001f8 ebea                          ldi  ZL, low(CORAZON<<1)
0001f9 e0f0                          ldi  ZH, high(CORAZON<<1)
0001fa d040                          rcall mostrar3Segundos
                                 
0001fb ece2                          ldi  ZL, low(ROMBO<<1)
0001fc e0f0                          ldi  ZH, high(ROMBO<<1)
0001fd d03d                          rcall mostrar3Segundos
                                 
0001fe ecea                          ldi  ZL, low(ALIEN<<1)
0001ff e0f0                          ldi  ZH, high(ALIEN<<1)
000200 d03a                          rcall mostrar3Segundos
                                 
                                     ; Restaurar registros
000201 91ff                          pop  r31
000202 91ef                          pop  r30
000203 91df                          pop  r29
000204 91cf                          pop  r28
000205 91bf                          pop  r27
000206 91af                          pop  r26
000207 919f                          pop  r25
000208 918f                          pop  r24
000209 916f                          pop  r22
00020a 915f                          pop  r21
00020b 914f                          pop  r20
00020c 913f                          pop  r19
00020d 912f                          pop  r18
00020e 911f                          pop  r17
00020f 910f                          pop  r16
000210 900f                          pop  r0
000211 9508                          ret
                                 
                                 ; Secuencia infinita de las 5 figuras (interrumpible por UART)
                                 mostrarSecuenciaAnimada:
                                 bucleSecuencia:
                                     ; Verificar si llego algun comando antes de cada figura
000212 9110 00c0                     lds  r17, UCSR0A
000214 ff17                          sbrs r17, RXC0
000215 c001                          rjmp noTecla7a
000216 ce73                          rjmp bucle_principal
                                 noTecla7a:
000217 eaea                          ldi  ZL, low(SONRISA<<1)
000218 e0f0                          ldi  ZH, high(SONRISA<<1)
000219 d021                          rcall mostrar3Segundos
                                 
00021a 9110 00c0                     lds  r17, UCSR0A
00021c ff17                          sbrs r17, RXC0
00021d c001                          rjmp noTecla7b
00021e ce6b                          rjmp bucle_principal
                                 noTecla7b:
00021f ebe2                          ldi  ZL, low(TRISTE<<1)
000220 e0f0                          ldi  ZH, high(TRISTE<<1)
000221 d019                          rcall mostrar3Segundos
                                 
000222 9110 00c0                     lds  r17, UCSR0A
000224 ff17                          sbrs r17, RXC0
000225 c001                          rjmp noTecla7c
000226 ce63                          rjmp bucle_principal
                                 noTecla7c:
000227 ebea                          ldi  ZL, low(CORAZON<<1)
000228 e0f0                          ldi  ZH, high(CORAZON<<1)
000229 d011                          rcall mostrar3Segundos
                                 
00022a 9110 00c0                     lds  r17, UCSR0A
00022c ff17                          sbrs r17, RXC0
00022d c001                          rjmp noTecla7d
00022e ce5b                          rjmp bucle_principal
                                 noTecla7d:
00022f ece2                          ldi  ZL, low(ROMBO<<1)
000230 e0f0                          ldi  ZH, high(ROMBO<<1)
000231 d009                          rcall mostrar3Segundos
                                 
000232 9110 00c0                     lds  r17, UCSR0A
000234 ff17                          sbrs r17, RXC0
000235 c001                          rjmp noTecla7e
000236 ce53                          rjmp bucle_principal
                                 noTecla7e:
000237 ecea                          ldi  ZL, low(ALIEN<<1)
000238 e0f0                          ldi  ZH, high(ALIEN<<1)
000239 d001                          rcall mostrar3Segundos
                                 
00023a cfd7                          rjmp bucleSecuencia
                                 
                                 ; Mostrar figura durante aproximadamente 3 segundos con escaneo continuo
                                 mostrar3Segundos:
00023b 01df                         movw r26, r30             
00023c e093                          ldi  r25, 0x03            
00023d ee88                          ldi  r24, 0xE8           
00023e 2766                          clr  r22                 
                                 bucle3s:
00023f d028                          rcall apagarFilas
000240 9145                          lpm  r20, Z+              
000241 d02d                          rcall configurarColumnas
000242 2f56                          mov  r21, r22           
000243 d040                          rcall activarFila
000244 d066                          rcall esperar1ms
                                 
                                     ; Verificar si llego comando por UART
000245 9110 00c0                     lds  r17, UCSR0A
000247 ff17                          sbrs r17, RXC0
000248 c001                          rjmp noTecla3s
000249 ce40                          rjmp bucle_principal
                                 noTecla3s:
00024a 9563                          inc  r22                 
00024b 3068                          cpi  r22, 8
00024c f010                          brlo filaValida3s
00024d 2766                          clr  r22                 
00024e 01fd                          movw r30, r26            
                                 filaValida3s:
00024f 9701                          sbiw r24, 1               
000250 f771                          brne bucle3s
000251 9508                          ret
                                 
                                 ; Display continuo de una figura (interrumpible por UART)
                                 mostrarSiempre:
000252 01df                          movw r26, r30             
000253 2766                          clr  r22                  
                                 bucleInfinito:
000254 d013                          rcall apagarFilas
000255 01fd                          movw r30, r26             
000256 2f26                          mov  r18, r22             
000257 0fe2                          add  ZL, r18
000258 1df1                          adc  ZH, r1
000259 9144                          lpm  r20, Z              
00025a d014                          rcall configurarColumnas
00025b 2f56                          mov  r21, r22            
00025c d027                          rcall activarFila
00025d d04d                          rcall esperar1ms
                                 
                                     ; Verificar si llego comando por UART
00025e 9110 00c0                     lds  r17, UCSR0A
000260 ff17                          sbrs r17, RXC0
000261 c001                          rjmp noTeclaSiempre
000262 ce27                          rjmp bucle_principal
                                 noTeclaSiempre:
                                    
000263 9563                          inc  r22                
000264 3068                          cpi  r22, 8
000265 f370                          brlo bucleInfinito
                                 
000266 2766                          clr  r22                
000267 cfec                          rjmp bucleInfinito
                                 
                                 
                                 
                                 ; Apagar todas las filas (poner en estado HIGH)
                                 apagarFilas:
000268 b105                          in   r16, PORTB
000269 630c                          ori  r16, FILASB_OFF      ; filas B en HIGH
00026a b905                          out  PORTB, r16
00026b b108                          in   r16, PORTC
00026c 600f                          ori  r16, FILASC_OFF      ; filas C en HIGH
00026d b908                          out  PORTC, r16
00026e 9508                          ret
                                 
                                 ; Configurar el patron de columnas segun el valor en r20
                                 configurarColumnas:
                                     ; Configurar columnas C1 a C6 en PD2 a PD7
00026f 2f04                          mov  r16, r20
000270 730f                          andi r16, 0x3F            
000271 0f00                          lsl  r16               
000272 0f00                          lsl  r16
000273 b11b                          in   r17, PORTD
000274 7013                          andi r17, 0x03            ; preservar PD0,PD1 (UART)
000275 2b10                          or   r17, r16
000276 b91b                          out  PORTD, r17
                                     
                                     ; Configurar columnas C7 a C8 en PB0 a PB1
000277 2f04                          mov  r16, r20
000278 7c00                          andi r16, 0xC0          
000279 9506                          lsr  r16                 
00027a 9506                          lsr  r16
00027b 9506                          lsr  r16
00027c 9506                          lsr  r16
00027d 9506                          lsr  r16
00027e 9506                          lsr  r16
00027f b115                          in   r17, PORTB
000280 7f1c                          andi r17, 0b11111100      
000281 2b10                          or   r17, r16
000282 b915                          out  PORTB, r17
000283 9508                          ret
                                 
                                 ; Activar unicamente la fila especificada en r21 (poner en LOW)
                                 activarFila:
000284 932f                          push r18
000285 933f                          push r19
000286 934f                          push r20
                                     
000287 3054                          cpi  r21, 4
000288 f084                          brlt filaEnPortoB
                                 
000289 5054                          subi r21, 4               
00028a e02f                          ldi  r18, FILASC_OFF      
00028b e031                          ldi  r19, 0x01            
00028c 2f45                          mov  r20, r21
                                 desplazarPC:
00028d 2344                          tst  r20
00028e f019                          breq finDesplazarPC
00028f 0f33                          lsl  r19                 
000290 954a                          dec  r20
000291 cffb                          rjmp desplazarPC
                                 finDesplazarPC:
000292 9530                          com  r19                  
000293 2323                          and  r18, r19
000294 b118                          in   r17, PORTC
000295 7f10                          andi r17, 0b11110000     
000296 2b12                          or   r17, r18
000297 b918                          out  PORTC, r17
000298 c00e                          rjmp finFila
                                 
                                 filaEnPortoB:
                                     ; Filas F1 a F4 estan en PORTB (PB2 a PB5)
000299 e32c                          ldi  r18, FILASB_OFF      
00029a e034                          ldi  r19, 0x04            
00029b 2f45                          mov  r20, r21
                                 desplazarPB:
00029c 2344                          tst  r20
00029d f019                          breq finDesplazarPB
00029e 0f33                          lsl  r19                  
00029f 954a                          dec  r20
0002a0 cffb                          rjmp desplazarPB
                                 finDesplazarPB:
0002a1 9530                          com  r19                
0002a2 2323                          and  r18, r19
0002a3 b115                          in   r17, PORTB
0002a4 7c13                          andi r17, 0b11000011     
0002a5 2b12                          or   r17, r18
0002a6 b915                          out  PORTB, r17
                                 
                                 finFila:
0002a7 914f                          pop  r20
0002a8 913f                          pop  r19
0002a9 912f                          pop  r18
0002aa 9508                          ret
                                 
                                 ; Generar retardo de 1ms usando Timer0 en modo CTC
                                 esperar1ms:
0002ab e002                          ldi  r16, (1<<OCF0A)     
0002ac bb05                          out  TIFR0, r16
                                 esperarTick:
0002ad b315                          in   r17, TIFR0
0002ae ff11                          sbrs r17, OCF0A          
0002af cffd                          rjmp esperarTick
0002b0 9508                          ret
                                 
                                 
                                 ; FUNCION DE SCROLL DE TEXTO
                                 
                                 ; Algoritmo de scroll horizontal para mostrar el mensaje completo
                                 ; Combina dos letras consecutivas desplazandolas bit a bit
                                 mostrarScrollMensaje:
                                     ; Preservar todos los registros utilizados
0002b1 920f                          push r0
0002b2 930f                          push r16
0002b3 931f                          push r17
0002b4 932f                          push r18
0002b5 933f                          push r19        
0002b6 934f                          push r20
0002b7 935f                          push r21
0002b8 936f                          push r22
0002b9 937f                          push r23        
0002ba 938f                          push r24        
0002bb 939f                          push r25
0002bc 93af                          push r26       
0002bd 93bf                          push r27
0002be 93cf                          push r28        
0002bf 93df                          push r29
0002c0 93ef                          push r30        
0002c1 93ff                          push r31
                                 
                                     ; Estado inicial del algoritmo de scroll
0002c2 2733                          clr  r19                  ; comenzar con primera figura
0002c3 d053                          rcall cargarFiguraActualYSiguiente
0002c4 e070                          ldi  r23, 0               
0002c5 e08a                          ldi  r24, VELOCIDAD       ; frames hasta proximo paso
0002c6 2766                          clr  r22                  
                                 
                                 bucleScroll:
                                     ; Apagar todas las filas antes de actualizar
0002c7 dfa0                          rcall apagarFilas
                                     
                                     ; Obtener byte de la figura actual
0002c8 01fd                          movw r30, r26            
0002c9 2f26                          mov  r18, r22             
0002ca 0fe2                          add  ZL, r18
0002cb 1df1                          adc  ZH, r1
0002cc 9144                          lpm  r20, Z              
                                     
                                     ; Obtener byte correspondiente de la figura siguiente
0002cd 01fe                          movw r30, r28             
0002ce 2f26                          mov  r18, r22
0002cf 0fe2                          add  ZL, r18
0002d0 1df1                          adc  ZH, r1
0002d1 9004                          lpm  r0, Z               
                                 
                                     ; Aplicar desplazamiento a la figura actual (hacia la derecha)
0002d2 2f27                          mov  r18, r23
0002d3 3028                          cpi  r18, 8
0002d4 f079                          breq soloFiguraSiguiente
                                 
0002d5 2322                          tst  r18
0002d6 f019                          breq figuraActualLista
                                 bucleDesplazarActual:
0002d7 9546                          lsr  r20                 
0002d8 952a                          dec  r18
0002d9 f7e9                          brne bucleDesplazarActual
                                 figuraActualLista:
                                 
                                     ; Aplicar desplazamiento a la figura siguiente (hacia la izquierda)
0002da e098                          ldi  r25, 8
0002db 1b97                          sub  r25, r23            
0002dc 2399                          tst  r25
0002dd f019                          breq siguienteLista
                                 bucleDesplazarSiguiente:
0002de 0c00                          lsl  r0                  
0002df 959a                          dec  r25
0002e0 f7e9                          brne bucleDesplazarSiguiente
                                 siguienteLista:
                                 
0002e1 0c00                          lsl  r0                   
0002e2 2940                          or   r20, r0              
0002e3 c002                          rjmp composicionTerminada
                                 
                                 soloFiguraSiguiente:
0002e4 2d40                          mov  r20, r0
0002e5 0f44                          lsl  r20                 
                                 
                                 composicionTerminada:
                                     ; Mostrar la fila compuesta en la matriz
0002e6 df88                          rcall configurarColumnas
0002e7 2f56                          mov  r21, r22            
0002e8 df9b                          rcall activarFila
0002e9 dfc1                          rcall esperar1ms
                                 
                                     ; Verificar si llego comando de interrupcion
0002ea 9110 00c0                     lds  r17, UCSR0A
0002ec ff17                          sbrs r17, RXC0
0002ed c001                          rjmp noInterrupcionScroll
0002ee c016                          rjmp finalizarScroll
                                 noInterrupcionScroll:
                                 
                                     ; Avanzar a la siguiente fila
0002ef 9563                          inc  r22
0002f0 3068                          cpi  r22, 8
0002f1 f2a8                          brlo bucleScroll
                                 
                                     ; Se completo un frame (todas las 8 filas)
0002f2 2766                          clr  r22                  
0002f3 958a                          dec  r24                  
                                 
                                     ; Verificar interrupcion tambien al final del frame
0002f4 9110 00c0                     lds  r17, UCSR0A
0002f6 ff17                          sbrs r17, RXC0
0002f7 c001                          rjmp noInterrupcionFrame
0002f8 c00c                          rjmp finalizarScroll
                                 noInterrupcionFrame:
                                 
0002f9 f669                          brne bucleScroll          
                                 
                                     ; Momento de avanzar un paso en el scroll
0002fa e08a                          ldi  r24, VELOCIDAD       
0002fb 9573                          inc  r23                  
0002fc 3079                          cpi  r23, 9               
0002fd f248                          brlo bucleScroll
                                 
                                     ; Termino el desplazamiento de la letra actual
0002fe 2777                          clr  r23                  
0002ff 9533                          inc  r19                  
000300 3135                          cpi  r19, NUMFIG          
000301 f008                          brlo siguienteFiguraOk
000302 2733                          clr  r19                 
                                 siguienteFiguraOk:
000303 d013                          rcall cargarFiguraActualYSiguiente
000304 cfc2                          rjmp bucleScroll
                                 
                                 ; Salida limpia del scroll restaurando todos los registros
                                 finalizarScroll:
000305 91ff                          pop  r31
000306 91ef                          pop  r30
000307 91df                          pop  r29
000308 91cf                          pop  r28
000309 91bf                          pop  r27
00030a 91af                          pop  r26
00030b 919f                          pop  r25
00030c 918f                          pop  r24
00030d 917f                          pop  r23
00030e 916f                          pop  r22
00030f 915f                          pop  r21
000310 914f                          pop  r20
000311 913f                          pop  r19
000312 912f                          pop  r18
000313 911f                          pop  r17
000314 910f                          pop  r16
000315 900f                          pop  r0
000316 9508                          ret
                                 
                                 ; Cargar punteros a la figura actual (X) y siguiente (Y) segun indice en r19
                                 cargarFiguraActualYSiguiente:
                                     ; Cargar puntero a figura actual
000317 ede2                          ldi  ZL, low(MENSAJE<<1)
000318 e0f0                          ldi  ZH, high(MENSAJE<<1)
000319 2f23                          mov  r18, r19             
00031a 0f22                          lsl  r18                  
00031b 0fe2                          add  ZL, r18
00031c 1df1                          adc  ZH, r1
00031d 9005                          lpm  r0, Z+              
00031e 2da0                          mov  r26, r0
00031f 9004                          lpm  r0, Z                
000320 2db0                          mov  r27, r0
                                 
                                     ; Calcular indice de figura siguiente (con wrap-around)
000321 2f23                          mov  r18, r19
000322 9523                          inc  r18
000323 3125                          cpi  r18, NUMFIG
000324 f008                          brlo indiceValido
000325 2722                          clr  r18                  
                                 
                                 indiceValido:
                                     ; Cargar puntero a figura siguiente
000326 ede2                          ldi  ZL, low(MENSAJE<<1)
000327 e0f0                          ldi  ZH, high(MENSAJE<<1)
000328 0f22                          lsl  r18                 
000329 0fe2                          add  ZL, r18
00032a 1df1                          adc  ZH, r1
00032b 9005                          lpm  r0, Z+              
00032c 2dc0                          mov  r28, r0
00032d 9004                          lpm  r0, Z               
00032e 2dd0                          mov  r29, r0


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   0 z  :   9 r0 :  17 r1 :   6 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  74 r17:  46 r18:  31 r19:  20 r20:  21 
r21:  11 r22:  22 r23:   8 r24:   9 r25:   9 r26:  10 r27:   5 r28:   6 
r29:   5 r30:  40 r31:  34 
Registers used: 19 out of 35 (54.3%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   5 add   :   5 adiw  :   0 and   :   2 
andi  :   9 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  13 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 brlt  :   1 brmi  :   0 
brne  :   4 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   0 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  11 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   2 cp    :   0 cpc   :   0 
cpi   :  16 cpse  :   0 dec   :   5 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :  12 inc   :   6 jmp   :   0 
ld    :   0 ldd   :   0 ldi   :  73 lds   :  12 lpm   :  14 lsl   :   9 
lsr   :   7 mov   :  18 movw  :   6 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   5 ori   :   6 out   :  18 pop   :  36 
push  :  36 rcall :  40 ret   :  13 reti  :   0 rjmp  :  39 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   0 sbic  :   0 sbis  :   0 
sbiw  :   1 sbr   :   0 sbrc  :   0 sbrs  :  12 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :   5 
sub   :   1 subi  :   1 swap  :   0 tst   :   4 wdr   :   0 
Instructions used: 35 out of 113 (31.0%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000660    930    702   1632   32768   5.0%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
